import{i as r}from"./index-Bp-GNCXH.js";class o{constructor(t,e){this.type=t,this.payload=e}static generic(t,e){return new o("Generic",{vault:t,record:e})}static counter(t,e){return new o("Counter",{vault:t,counter:e})}}class p{constructor(t){this.procedureArgs=t}async generateSLIP10Seed(t,e){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"SLIP10Generate",payload:{output:t,sizeBytes:e}}}).then(a=>Uint8Array.from(a))}async deriveSLIP10(t,e,a,s){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"SLIP10Derive",payload:{chain:t,input:{type:e,payload:a},output:s}}}).then(c=>Uint8Array.from(c))}async recoverBIP39(t,e,a){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"BIP39Recover",payload:{mnemonic:t,passphrase:a,output:e}}}).then(s=>Uint8Array.from(s))}async generateBIP39(t,e){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"BIP39Generate",payload:{output:t,passphrase:e}}}).then(a=>Uint8Array.from(a))}async getEd25519PublicKey(t){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"PublicKey",payload:{type:"Ed25519",privateKey:t}}}).then(e=>Uint8Array.from(e))}async signEd25519(t,e){return await r("plugin:stronghold|execute_procedure",{...this.procedureArgs,procedure:{type:"Ed25519Sign",payload:{privateKey:t,msg:e}}}).then(a=>Uint8Array.from(a))}}class i{constructor(t,e){this.path=t,this.name=e}getVault(t){return new l(this.path,this.name,t)}getStore(){return new u(this.path,this.name)}}class u{constructor(t,e){this.path=t,this.client=e}async get(t){return await r("plugin:stronghold|get_store_record",{snapshotPath:this.path,client:this.client,key:t}).then(e=>e&&Uint8Array.from(e))}async insert(t,e,a){await r("plugin:stronghold|save_store_record",{snapshotPath:this.path,client:this.client,key:t,value:e,lifetime:a})}async remove(t){return await r("plugin:stronghold|remove_store_record",{snapshotPath:this.path,client:this.client,key:t}).then(e=>e&&Uint8Array.from(e))}}class l extends p{constructor(t,e,a){super({snapshotPath:t,client:e,vault:a}),this.path=t,this.client=e,this.name=a}async insert(t,e){await r("plugin:stronghold|save_secret",{snapshotPath:this.path,client:this.client,vault:this.name,recordPath:t,secret:e})}async remove(t){await r("plugin:stronghold|remove_secret",{snapshotPath:this.path,client:this.client,vault:this.name,recordPath:t.payload.record})}}class h{constructor(t){this.path=t}static async load(t,e){return await r("plugin:stronghold|initialize",{snapshotPath:t,password:e}).then(()=>new h(t))}async unload(){await r("plugin:stronghold|destroy",{snapshotPath:this.path})}async loadClient(t){return await r("plugin:stronghold|load_client",{snapshotPath:this.path,client:t}).then(()=>new i(this.path,t))}async createClient(t){return await r("plugin:stronghold|create_client",{snapshotPath:this.path,client:t}).then(()=>new i(this.path,t))}async save(){await r("plugin:stronghold|save",{snapshotPath:this.path})}}export{i as Client,o as Location,u as Store,h as Stronghold,l as Vault};
