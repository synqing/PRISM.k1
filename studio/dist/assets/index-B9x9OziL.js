import{listen as n}from"./event-C1PleKz2.js";import{R as o,i as s}from"./index-Bp-GNCXH.js";async function c(r,t){return await i.load(r,t)}async function l(r){return await i.get(r)}class d{get store(){return this._store||(this._store=c(this.path,this.options)),this._store}constructor(t,a){this.path=t,this.options=a}async init(){await this.store}async set(t,a){return(await this.store).set(t,a)}async get(t){return(await this.store).get(t)}async has(t){return(await this.store).has(t)}async delete(t){return(await this.store).delete(t)}async clear(){await(await this.store).clear()}async reset(){await(await this.store).reset()}async keys(){return(await this.store).keys()}async values(){return(await this.store).values()}async entries(){return(await this.store).entries()}async length(){return(await this.store).length()}async reload(t){await(await this.store).reload(t)}async save(){await(await this.store).save()}async onKeyChange(t,a){return(await this.store).onKeyChange(t,a)}async onChange(t){return(await this.store).onChange(t)}async close(){this._store&&await(await this._store).close()}}class i extends o{constructor(t){super(t)}static async load(t,a){const e=await s("plugin:store|load",{path:t,options:a});return new i(e)}static async get(t){return await s("plugin:store|get_store",{path:t}).then(a=>a?new i(a):null)}async set(t,a){await s("plugin:store|set",{rid:this.rid,key:t,value:a})}async get(t){const[a,e]=await s("plugin:store|get",{rid:this.rid,key:t});return e?a:void 0}async has(t){return await s("plugin:store|has",{rid:this.rid,key:t})}async delete(t){return await s("plugin:store|delete",{rid:this.rid,key:t})}async clear(){await s("plugin:store|clear",{rid:this.rid})}async reset(){await s("plugin:store|reset",{rid:this.rid})}async keys(){return await s("plugin:store|keys",{rid:this.rid})}async values(){return await s("plugin:store|values",{rid:this.rid})}async entries(){return await s("plugin:store|entries",{rid:this.rid})}async length(){return await s("plugin:store|length",{rid:this.rid})}async reload(t){await s("plugin:store|reload",{rid:this.rid,...t})}async save(){await s("plugin:store|save",{rid:this.rid})}async onKeyChange(t,a){return await n("store://change",e=>{e.payload.resourceId===this.rid&&e.payload.key===t&&a(e.payload.exists?e.payload.value:void 0)})}async onChange(t){return await n("store://change",a=>{a.payload.resourceId===this.rid&&t(a.payload.key,a.payload.exists?a.payload.value:void 0)})}}export{d as LazyStore,i as Store,l as getStore,c as load};
