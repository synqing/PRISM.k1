{
  "version": 3,
  "sources": ["../../.pnpm/@tauri-apps+plugin-opener@2.5.0/node_modules/@tauri-apps/plugin-opener/dist-js/index.js"],
  "sourcesContent": ["import { invoke } from '@tauri-apps/api/core';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Open files and URLs using their default application.\n *\n * ## Security\n *\n * This API has a scope configuration that forces you to restrict the files and urls to be opened.\n *\n * ### Restricting access to the {@link open | `open`} API\n *\n * On the configuration object, `open: true` means that the {@link open} API can be used with any URL,\n * as the argument is validated with the `^((mailto:\\w+)|(tel:\\w+)|(https?://\\w+)).+` regex.\n * You can change that regex by changing the boolean value to a string, e.g. `open: ^https://github.com/`.\n *\n * @module\n */\n/**\n * Opens a url with the system's default app, or the one specified with {@linkcode openWith}.\n *\n * @example\n * ```typescript\n * import { openUrl } from '@tauri-apps/plugin-opener';\n *\n * // opens the given URL on the default browser:\n * await openUrl('https://github.com/tauri-apps/tauri');\n * // opens the given URL using `firefox`:\n * await openUrl('https://github.com/tauri-apps/tauri', 'firefox');\n * ```\n *\n * @param url The URL to open.\n * @param openWith The app to open the URL with. If not specified, defaults to the system default application for the specified url type.\n * On mobile, `openWith` can be provided as `inAppBrowser` to open the URL in an in-app browser. Otherwise, it will open the URL in the system default browser.\n *\n * @since 2.0.0\n */\nasync function openUrl(url, \n// eslint-disable-next-line @typescript-eslint/no-redundant-type-constituents\nopenWith) {\n    await invoke('plugin:opener|open_url', {\n        url,\n        with: openWith\n    });\n}\n/**\n * Opens a path with the system's default app, or the one specified with {@linkcode openWith}.\n *\n * @example\n * ```typescript\n * import { openPath } from '@tauri-apps/plugin-opener';\n *\n * // opens a file using the default program:\n * await openPath('/path/to/file');\n * // opens a file using `vlc` command on Windows.\n * await openPath('C:/path/to/file', 'vlc');\n * ```\n *\n * @param path The path to open.\n * @param openWith The app to open the path with. If not specified, defaults to the system default application for the specified path type.\n *\n * @since 2.0.0\n */\nasync function openPath(path, openWith) {\n    await invoke('plugin:opener|open_path', {\n        path,\n        with: openWith\n    });\n}\n/**\n * Reveal a path with the system's default explorer.\n *\n * #### Platform-specific:\n *\n * - **Android / iOS:** Unsupported.\n *\n * @example\n * ```typescript\n * import { revealItemInDir } from '@tauri-apps/plugin-opener';\n * await revealItemInDir('/path/to/file');\n * await revealItemInDir([ '/path/to/file', '/path/to/another/file' ]);\n * ```\n *\n * @param path The path to reveal.\n *\n * @since 2.0.0\n */\nasync function revealItemInDir(path) {\n    const paths = typeof path === 'string' ? [path] : path;\n    return invoke('plugin:opener|reveal_item_in_dir', { paths });\n}\n\nexport { openPath, openUrl, revealItemInDir };\n"],
  "mappings": ";;;;;;AAuCA,eAAe,QAAQ,KAEvB,UAAU;AACN,QAAM,OAAO,0BAA0B;AAAA,IACnC;AAAA,IACA,MAAM;AAAA,EACV,CAAC;AACL;AAmBA,eAAe,SAAS,MAAM,UAAU;AACpC,QAAM,OAAO,2BAA2B;AAAA,IACpC;AAAA,IACA,MAAM;AAAA,EACV,CAAC;AACL;AAmBA,eAAe,gBAAgB,MAAM;AACjC,QAAM,QAAQ,OAAO,SAAS,WAAW,CAAC,IAAI,IAAI;AAClD,SAAO,OAAO,oCAAoC,EAAE,MAAM,CAAC;AAC/D;",
  "names": []
}
