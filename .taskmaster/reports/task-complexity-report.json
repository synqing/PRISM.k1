{
	"meta": {
		"generatedAt": "2025-10-15T23:14:39.958Z",
		"tasksAnalyzed": 10,
		"totalTasks": 20,
		"analysisCount": 10,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 11,
			"taskTitle": "Create Motion & Sync Enumerations and Temporal Interfaces",
			"complexityScore": 3,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down the work into defining enums, declaring shared structs/context headers, and documenting/testing the new public API expectations for motion and sync interfaces.",
			"reasoning": "Mostly header-only definitions with straightforward structs and enum values; requires coordination with ADR-010 and static assertions but minimal control flow or cross-module impact."
		},
		{
			"taskId": 12,
			"taskTitle": "Implement SYNC and OFFSET Temporal Sequencing",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Separate tasks for context init, SYNC fast path, OFFSET delay handling, performance/timing safeguards, and unit/integration test coverage for both modes.",
			"reasoning": "Introduces real-time frame computation, FreeRTOS tick handling, and timing instrumentation while meeting CPU budgets—moderate complexity with multiple edge cases and testing needs."
		},
		{
			"taskId": 13,
			"taskTitle": "Extend .prism v1.1 Header and Parser",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Create subtasks for struct size updates, CRC/backward-compat adjustments, TLV parsing with validation, legacy defaults, and regression tests plus documentation updates.",
			"reasoning": "Requires coordinated changes across storage, parser, and temporal modules with strict binary layout, CRC recalculation, and backward compatibility guarantees."
		},
		{
			"taskId": 14,
			"taskTitle": "Integrate Temporal Calculation with Playback Task",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Plan subtasks for wiring context construction, channel buffering, motion switch scaffolding, demo pattern generation, and integration test/logging validation.",
			"reasoning": "Integration work touches playback task lifecycles, buffers, pattern assets, and logging; moderate risk ensuring frame safety and sample assets stay in sync."
		},
		{
			"taskId": 15,
			"taskTitle": "Implement PROGRESSIVE Mode with Shape Presets",
			"complexityScore": 7,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Define subtasks covering delay table generation, motion-direction handling, preset builders, static allocation management, firmware logic updates, and verification tests with goldens.",
			"reasoning": "Adds new per-LED delay math, motion-aware indexing, preset generation, and persistent buffers; requires careful testing to confirm interpolation correctness and symmetry."
		},
		{
			"taskId": 16,
			"taskTitle": "Execute Progressive Mode Hardware Validation & Performance Profiling",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Outline subtasks for firmware deployment, high-speed capture workflow, quantitative analysis scripts, performance logging, documentation updates, and bug triage/reporting.",
			"reasoning": "Hardware validation demands coordinated lab work, data capture/analysis, performance measurement, and documentation—logistically complex with multiple deliverables."
		},
		{
			"taskId": 17,
			"taskTitle": "Add WAVE Mode with Lookup Tables",
			"complexityScore": 8,
			"recommendedSubtasks": 6,
			"expansionPrompt": "Split into subtasks for LUT generator module, table allocation/loading, calculate_ch2_frame wave branch, motion transforms, preset creation, and unit/perf testing.",
			"reasoning": "Introduces new module, fixed-point waveform math, precomputation, and performance-sensitive render loop paths; high complexity ensuring timing constraints and correctness."
		},
		{
			"taskId": 18,
			"taskTitle": "Profile and Optimize WAVE Mode Execution",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Create subtasks for profiling hook implementation, benchmark harness, memory placement audits, heap diagnostics, and report generation with recommendations.",
			"reasoning": "Focuses on performance tuning with instrumentation, benchmarking, and memory analysis; less code volume but deep optimization and reporting requirements."
		},
		{
			"taskId": 19,
			"taskTitle": "Implement CUSTOM Mode and Web-Based Delay Map Editor",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Plan subtasks spanning firmware support for custom maps, validation logic, web editor UI/UX, curve-to-delay algorithms, import/export tooling, WASM glue, preset seeding, and documentation/tests.",
			"reasoning": "Combines firmware enhancements with a full-featured web tool, binary serialization, and end-to-end validation; high cross-discipline scope and integration complexity."
		},
		{
			"taskId": 20,
			"taskTitle": "Finalize Documentation, Migration, and Release Validation",
			"complexityScore": 9,
			"recommendedSubtasks": 8,
			"expansionPrompt": "Break into subtasks for migration CLI, user manual authoring, tutorial production, soak testing plus telemetry analysis, pattern library packaging, release notes, QA checklist, and artifact publication.",
			"reasoning": "Broad release effort blending tooling, extensive documentation, multimedia content, long-run testing, and release management; highly coordinated work with many deliverables."
		}
	]
}